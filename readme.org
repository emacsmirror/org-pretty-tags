#+title: Surrogates for tags

* About
:PROPERTIES:
:EXPORT_FILE_NAME: doc-org-pretty-tags
:END:

This is a minor mode to display text or image surrogates for org mode
tags.

** Why

In Org mode only a small set of characters is allowed in tags.  A
wider range of tags could be nice.

** What the mode offers

- A way to define surrogate strings and surrogate images for certain tags.
- Overlay the tags with the surrogates.

Note that the actual tag is not changed by the mode, it's just decoration.

*** Example :ATTACH:
:PROPERTIES:
:ID:       a0a7f0d8-cdc8-414b-a715-e48205d07deb
:END:

**** Ordinary tag display

[[data/a0/a7f0d8-cdc8-414b-a715-e48205d07deb/emacsshot.win-20190106143046.png]]

**** Pretty tag display

[[data/a0/a7f0d8-cdc8-414b-a715-e48205d07deb/emacsshot.win-20190106143055.png]]

** Use

*** Definition

Use =M-x customize-variable org-pretty-tags-alternative-strings= to
define surrogate strings for tags.  E.g. add the pair "money", "$$$".

Use =M-x customize-variable org-pretty-tags-alternative-images= to
define surrogate images for tags.  The definition of the image is
expected to be a path to an image.  E.g. add the pair "org", "<path to
org icon>".

*** Activate

- Activate the mode with =M-x org-pretty-tags-mode=.

- Deactivate the mode with a further =M-x org-pretty-tags-mode=.

** Install

Install by adding the respective lines to your init.e (as usual):

#+begin_src emacs-lisp :tangle no
(push "<path/to/org-pretty-tags>" load-path)
(require 'org-pretty-tags)
#+end_src

** License

*** Copyright

#+name: copyright
#+begin_src text
Copyright 2019 Marco Wahl

Author: Marco Wahl <marcowahlsoft@gmail.com>
Maintainer: Marco Wahl <marcowahlsoft@gmail.com>
Created: [2019-01-06]
Version: 0.0.0
Keywords: reading, outliner

This file is not part of Emacs.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+end_src

** Files

- org-pretty-tags.org ::  The literate source
- readme.org :: Identical to the literate source file.
  - With this filename the content shows up automatically e.g. on gitlab.
- LICENSE :: GPL3 license.
- data :: Artefacts.  E.g. images for documentation.
- *.el :: Elisp source files.
  - Note: these files are derived from the literate source.

** Tasks

*** DONE Make sure only tags get the surrogate

- A match before the tag area gets replaced by the surrogate.

* Code

** Functionality
:PROPERTIES:
:header-args:emacs-lisp: :tangle org-pretty-tags.el
:END:

*** First Lines
:PROPERTIES:
:ID:       15f7cf10-3b11-4373-b2e7-8b89f1dbafbc
:END:

#+begin_src emacs-lisp :noweb yes
;;; org-pretty-tags.el --- Surrogates for tags  -*- lexical-binding: t -*-

;; THIS FILE HAS BEEN GENERATED.  see the literate source.

;; <<copyright>>


;;; Commentary:

;; See the literate source file.


;;; Code:
#+end_src

*** Functionality
:PROPERTIES:
:header-args:emacs-lisp+: :comments both
:ID:       3b8dcfaf-b4df-4683-b5df-9a1a54208b3c
:END:

**** container for the overlays
:PROPERTIES:
:ID:       cf2048b2-5f4e-4211-873d-9bce13c53f59
:END:

#+begin_src emacs-lisp
(defvar-local org-pretty-tags-overlays nil
 "Container for the overlays of org-pretty-tags-mode.")
#+end_src

**** list of tags with symbols surrogates for plain ascii tags
:PROPERTIES:
:ID:       16c25206-73c2-422b-8948-979c415b75de
:END:

#+begin_src emacs-lisp
;;;###autoload
(defcustom org-pretty-tags-surrogate-strings
  '(("imp" . "â˜†") ; important stuff.
    ("idea" . "ðŸ’¡") ; inspiration.
    ("money" . "$$$")
    ("easy" . "â‚°")
    ("music" . "â™©"))
  "List of pretty replacements for tags."
  :type '(alist :key-type string :value-type string)
  :group 'org-tags)
#+end_src

**** list of image surrogates for plain ascii tags
:PROPERTIES:
:ID:       cabb8307-a825-485d-9bf4-371d4020ef5b
:END:

#+begin_src emacs-lisp
;;;###autoload
(defcustom org-pretty-tags-surrogate-images
  '()
  "List of pretty image replacements for tags."
  :type '(alist :key-type string :value-type string)
  :group 'org-tags)
#+end_src

**** cache for the images
:PROPERTIES:
:ID:       fb26c0bc-a69e-4cd2-8b5a-800682d24706
:foo:      foo
:END:

#+begin_src emacs-lisp
(defun org-pretty-tags-image-cache ()
  "Return a map from tag to image.
Input is `org-pretty-tags-surrogate-images'."
  (mapcar
   (lambda (x)
     (cons (car x)
           (let* ((px-subtract-from-image-height 5)
                  (img
                   (create-image
                    (cdr x)
                    nil nil
                    :height (- (window-font-height) px-subtract-from-image-height)
                    :ascent 'center)))
             (plist-put (cdr img) :type 'imagemagick)
             img)))
   org-pretty-tags-surrogate-images))
#+end_src

#+begin_src emacs-lisp
(defvar org-pretty-tags-image-cache
  (org-pretty-tags-image-cache)
  "Cache for the image surrogates.")
#+end_src

#+begin_src emacs-lisp
(defun org-pretty-tags-update-image-cache ()
  "Update `org-pretty-tags-image-cache' from list `org-pretty-tags-surrogate-images'."
  (setq org-pretty-tags-image-cache (org-pretty-tags-image-cache)))
#+end_src

**** function to update the tag surrogates
:PROPERTIES:
:ID:       da436b9c-2eb6-4247-804c-20e18a626ac7
:END:

#+begin_src emacs-lisp
(defun org-pretty-tags-delete-overlays ()
  (while org-pretty-tags-overlays
    (delete-overlay (pop org-pretty-tags-overlays))))

(defun org-pretty-tags-refresh-overlays ()
  "Overlay tags in current buffer."
  (let ((inhibit-read-only t))
    (org-pretty-tags-delete-overlays)
    (mapc (lambda (x)
            (org-with-point-at 1
                                        ; try: make sure only tags are changed.
                                        ; try: use org functionality to loop over the headings.
              (while (re-search-forward
                      (concat ":\\(" (car x) "\\):") nil t)
                (when (or (derived-mode-p 'org-agenda-mode)
                          (save-match-data (org-at-heading-p)))
                  (push (make-overlay (match-beginning 1) (match-end 1))
                        org-pretty-tags-overlays)
                  (overlay-put (car org-pretty-tags-overlays) 'display (cdr x))))))
          (append org-pretty-tags-surrogate-strings org-pretty-tags-image-cache))))
#+end_src

**** define the mode
:PROPERTIES:
:ID:       a3d9cc59-89aa-4165-a844-90da8531b46f
:END:

#+begin_src emacs-lisp
;;;###autoload
(define-minor-mode org-pretty-tags-mode
  "Display surrogates for tags."
  :lighter " pretty tags"
  (cond
   (org-pretty-tags-mode
    (unless (derived-mode-p 'org-mode 'org-agenda-mode)
      (user-error "Attempt to activate pretty tags mode on non Org mode buffer.  Doing nothing.  Try with Org mode buffer."))
    (org-pretty-tags-refresh-overlays)
    (add-hook 'org-after-tags-change-hook #'org-pretty-tags-refresh-overlays)
    (add-hook 'org-ctrl-c-ctrl-c-final-hook #'org-pretty-tags-refresh-overlays)
    (message "pretty tags overlays installed"))
   (t
    (org-pretty-tags-delete-overlays)
    (remove-hook 'org-after-tags-change-hook #'org-pretty-tags-refresh-overlays)
    (remove-hook 'org-ctrl-c-ctrl-c-final-hook #'org-pretty-tags-refresh-overlays)
    (message "pretty tags overlays removed"))))
#+end_src

*** Last Lines
:PROPERTIES:
:ID:       300d188f-9b90-4bd8-9d65-78823402a3de
:END:

#+begin_src emacs-lisp

(provide 'org-pretty-tags)

;;; org-pretty-tags.el ends here
#+end_src


** Testing

*** Run Unittests

 - Evaluate the following source block to tangle the necessary and run
   the unittests e.g. by following the link [[elisp:(progn
   (org-babel-next-src-block) (org-babel-execute-src-block))]].

#+begin_src emacs-lisp :results silent
(let ((apath "."))
  (org-babel-tangle-file "org-pretty-tags.org")
  (ert-delete-all-tests)
  (push apath load-path)
  (load "org-pretty-tags.el")
  (load "test-org-pretty-tags.el")
  (ert t)
  (setq load-path (remove apath load-path))
  (run-with-timer 1 nil (lambda () (switch-to-buffer-other-window "*ert*"))))
#+end_src

*** Unittests
:PROPERTIES:
:header-args:emacs-lisp: :tangle test-org-pretty-tags.el
:END:

**** First lines
:PROPERTIES:
:ID:       0afc357c-dbc7-447b-8123-8b725e9c6e7d
:END:

#+begin_src emacs-lisp :padline no :noweb yes
;;; test-org-pretty-tags.el --- tests  -*- lexical-binding: t -*-


;; THIS FILE HAS BEEN GENERATED.  see the literate source.

;; <<copyright>>


#+end_src

**** Tests
:PROPERTIES:
:header-args:emacs-lisp+: :comments both
:ID:       dac141b6-e0a8-4312-8022-90b08fce4c84
:END:

#+begin_src emacs-lisp
(require 'org-pretty-tags)
#+end_src

#+begin_src emacs-lisp
(ert-deftest test-org-pretty-tags-1 ()
  "a glyph overlays a tag."
  (with-temp-buffer
    (insert "* foo :bar:
")
    (org-mode)
    (let ((org-pretty-tags-surrogate-strings
           '(("bar" . "&"))))
      (org-pretty-tags-mode)
      (buffer-substring 8 9)
      (should (get-char-property 8 'display)))))
#+end_src

**** Last Lines
:PROPERTIES:
:ID:       b4d9edb9-2c12-4110-a47d-361ce458f129
:END:

#+begin_src emacs-lisp

(provide 'test-org-pretty-tags)

;;; test-org-pretty-tags.el ends here
#+end_src
